#!/usr/bin/env perl
use Mojolicious::Lite -signatures;

use lib 'lib';
use V073::Data;

### Preparations

# Load configuration data
plugin NotYAMLConfig => {
    file => $ENV{V073_CONFIG_FILE} // 'config.yml',
};

# Serve app icons from artwork submodule
delete app->static->extra->{'favicon.ico'};
push @{app->static->paths}, app->home->rel_file('artwork/logo');

# Prepare data model
helper data => sub ($self, $rs) {
    state $cdb  = app->config('db');
    state $data = V073::Data->new(
        db_file     => $ENV{V073_DB} // app->home->rel_file($cdb->{file}),
        schema_file => app->home->rel_file($cdb->{schema_file}),
    );
    return $data->helper($rs);
};

# Insert default types/options from configuration
my $default_options = app->config('voting')->{default_options};
while (my ($type_name, $option_names) = each %$default_options) {

    # Already exists
    next if app->data('Type')->count({name => $type_name});

    # Create type and options
    my $type = app->data('Type')->create({name => $type_name});
    $type->create_related(options => {text => $_}) for @$option_names;

    # Add abstention option
    my $abstention = app->config('voting')->{abstention};
    $type->create_related(options => {text => $abstention});
}

# Token helper helper
sub _generate_token ($len) {
    my @chars = ('A'..'Z', '0'..'9');
    return join '' => map $chars[rand @chars] => 1 .. $len;
}

# Helper to generate new unique tokens
helper token => sub ($self) {
    my $token   = _generate_token($self->config('token_length'));
    my $voting  = $self->data('Voting')->count({token => $token});
    my $vote    = $self->data('Token')->count({name => $token});
    $token      = $self->token if $voting or $vote;
    return $token;
};

# Helper to generate free type names
helper create_free_type_name => sub ($self, $len = 20) {
    my @chars       = ('a'..'z', '0'..'9');
    my $type_name   = 'free_' . join '' => map $chars[rand @chars] => 1 .. $len;
    my $type        = $self->data('Type')->count({name => $type_name});
    $type_name      = $self->create_free_type_name if $type;
    return $type_name;
};

### Serve the frontend

plugin Webpack => {
    process         => [qw(js css vue v073)],
    dependencies    => {v073 => [qw(
        vue-router
        vue-material
    )]},
};

### Actions

# Serve the frontend app (DATA section at the end of this file)
get '/' => 'frontend';

# Decide whether a given token is for admins or voters
post '/token-type' => sub ($c) {
    my $token = $c->param('token');

    # No token at all?
    return $c->render(status => 403, text => 'No token given')
        unless defined $token;

    # Is it a voting ("admin") token?
    return $c->render(json => {type => 'voting'})
        if $c->data('Voting')->count({token => $token});

    # Is it a vote token?
    return $c->render(json => {type => 'vote'})
        if $c->data('Token')->count({name => $token});

    # Neither?
    return $c->render(status => 404, text => 'Token not found');
};

group { under '/types';

    get '/' => sub ($c) { $c->redirect_to('default_types') };
    get '/default' => sub ($c) {

        # Retrieve types with options as simple data structure
        my @types = $c->data('Type')->search({}, {
            order_by => 'options.id',
            prefetch => 'options',
        });

        # Compactify: {name => [Option texts]...}
        my %type = map { my $type = $_;
            $type->name => [ map $_->text => $type->options ]
        } @types;

        # Done
        $c->render(json => \%type);

    } => 'default_types';

    get '/:name' => sub ($c) {
        my $type_name = $c->param('name');

        # Try to retrieve the type
        my $type = $c->data('Type')->find($type_name, {
            order_by => 'options.id',
            prefetch => 'options',
        });
        return $c->render(status => 404, text => 'Type not found') unless $type;

        # Send compacted type data
        $c->render(json => {
            name    => $type->name,
            options => [ map $_->text => $type->options ],
        });

    } => 'get_type';

    post '/' => sub ($c) {

        # Create the type
        my $type_name   = $c->create_free_type_name;
        my $type        = $c->data('Type')->create({name => $type_name});

        # Create the initial option (abstention)
        my $abst = $c->config('voting')->{abstention};
        $type->create_related(options => {text => $abst});

        # Send compacted type data
        $c->render(json => {
            name    => $type->name,
            options => [ map $_->text => $type->options ],
        });

    } => 'create_type';
};

### Done
app->start;

__DATA__

@@ frontend.html.ep
<!doctype html>
<html>
    <head>
        %= t meta => (name => 'viewport', content => 'width=device-width,initial-scale=1,minimal-ui')
        %= t title => 'v073'
        %= asset 'frontend.css'
        %= stylesheet '//fonts.googleapis.com/css?family=Roboto:400,500,700,400italic|Material+Icons';
        %= t link => (rel => 'shortcut icon', type => 'image/png', href => url_for('/logo_notext_128.png'))
        %= t link => (rel => 'icon', type => 'image/svg+xml', sizes => 'any', href => url_for('/logo_notext.svg'))
    </head>
    <body>
        %= t div => (id => 'v073-frontend')
        %= asset 'frontend.js'
    </body>
</html>
